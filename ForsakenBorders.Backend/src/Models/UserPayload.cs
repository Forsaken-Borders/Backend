/*
 * Forsaken Borders User Service
 *
 * Allows universal login while correctly conforming to OWASP's cheatsheet recommendations.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lunar@forsaken-borders.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using ForsakenBorders.Backend.Utilities;
using Newtonsoft.Json;

namespace ForsakenBorders.Backend.Models
{
    /// <summary>
    /// The payload the user sends to create or edit a new user.
    /// </summary>
    [DataContract]
    public partial class UserPayload : IEquatable<UserPayload>
    {
        /// <summary>
        /// The user&#x27;s email. Never exposed to the API.
        /// </summary>
        /// <value>The user&#x27;s email. Never exposed to the API.</value>
        [Required]

        [DataMember(Name = "email")]
        public string Email { get; set; }

        /// <summary>
        /// The user&#x27;s password. Should never be stored, but hashed instead.
        /// </summary>
        /// <value>The user&#x27;s password. Should never be stored, but hashed instead.</value>
        [Required]

        [StringLength(72, MinimumLength = 8)]
        [DataMember(Name = "password")]
        public string Password { get; set; }

        /// <summary>
        /// The user&#x27;s display name. May be duplicates.
        /// </summary>
        /// <value>The user&#x27;s display name. May be duplicates.</value>
        [Required]

        [StringLength(32, MinimumLength = 3)]
        [DataMember(Name = "username")]
        public string Username { get; set; }

        /// <summary>
        /// The user&#x27;s preferred first name.
        /// </summary>
        /// <value>The user&#x27;s preferred first name.</value>

        [MaxLength(32)]
        [DataMember(Name = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The user&#x27;s preferred last name.
        /// </summary>
        /// <value>The user&#x27;s preferred last name.</value>

        [MaxLength(32)]
        [DataMember(Name = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new();
            sb.Append("class ForsakenBordersBackendApiV1PayloadsUserPayload {\n");
            sb.Append("  Email: ").AppendLine(Email);
            sb.Append("  Password: ").AppendLine(Password);
            sb.Append("  Username: ").AppendLine(Username);
            sb.Append("  FirstName: ").AppendLine(FirstName);
            sb.Append("  LastName: ").AppendLine(LastName);
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

        /// <inheritdoc/>
        public override bool Equals(object obj)
        {
            if (obj is UserPayload payload)
            {
                return payload.Email == Email
                    && payload.Password == Password
                    && payload.Username == Username
                    && payload.FirstName == FirstName
                    && payload.LastName == LastName;
            }
            else if (obj is User user)
            {
                bool passwordsMatch = Password.Argon2idHash(user.PasswordSalt).SequenceEqual(user.PasswordHash);

                return user.Email == Email
                    && passwordsMatch
                    && user.Username == Username
                    && user.FirstName == FirstName
                    && user.LastName == LastName;
            }

            return false;
        }

        /// <inheritdoc/>
        public bool Equals(UserPayload other)
        {
            return other is not null
                && other.Email == Email
                && other.Password == Password
                && other.Username == Username
                && other.FirstName == FirstName
                && other.LastName == LastName;
        }

        /// <inheritdoc/>
        public override int GetHashCode() => HashCode.Combine(Email, Password, Username, FirstName, LastName);

        /// <inheritdoc/>
        public static bool operator ==(UserPayload left, UserPayload right)
        {
            return Equals(left, right);
        }

        /// <inheritdoc/>
        public static bool operator !=(UserPayload left, UserPayload right)
        {
            return !Equals(left, right);
        }
    }
}
