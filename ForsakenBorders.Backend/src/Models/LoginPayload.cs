/*
 * Forsaken Borders User Service
 *
 * Allows universal login while correctly conforming to OWASP's cheatsheet recommendations.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lunar@forsaken-borders.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ForsakenBorders.Backend.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class LoginPayload : IEquatable<LoginPayload>
    {
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [Required]

        [MaxLength(320)]
        [DataMember(Name = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [Required]

        [StringLength(72, MinimumLength = 8)]
        [DataMember(Name = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets TokenExpiration
        /// </summary>

        [DataMember(Name = "tokenExpiration")]
        public DateTime? TokenExpiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new();
            sb.Append("class ForsakenBordersBackendApiV1PayloadsLoginPayload {\n");
            sb.Append("  Email: ").AppendLine(Email);
            sb.Append("  Password: ").AppendLine(Password);
            sb.Append("  TokenExpiration: ").AppendLine(TokenExpiration.ToString());
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

        /// <inheritdoc/>
        public override bool Equals(object obj) => obj is not null and LoginPayload loginPayload && Equals(loginPayload);

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            HashCode hash = new();
            hash.Add(Email);
            hash.Add(Password);
            hash.Add(TokenExpiration);
            return hash.ToHashCode();
        }

        /// <inheritdoc/>
        public bool Equals(LoginPayload other) => Equals(other);

        /// <inheritdoc />
        public static bool operator ==(LoginPayload left, LoginPayload right)
        {
            return Equals(left, right);
        }

        /// <inheritdoc />
        public static bool operator !=(LoginPayload left, LoginPayload right)
        {
            return !Equals(left, right);
        }
    }
}
