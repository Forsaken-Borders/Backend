/*
 * Forsaken Borders User Service
 *
 * Allows universal login while correctly conforming to OWASP's cheatsheet recommendations.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lunar@forsaken-borders.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using ForsakenBorders.Backend.Attributes;
using ForsakenBorders.Backend.Models;
using ForsakenBorders.Backend.Utilities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.Annotations;

namespace ForsakenBorders.Backend.Controllers
{
    /// <summary>
    /// API Controller used to intercept and handle all unexpected exception
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    [AllowAnonymous]
    public class ErrorApiController : ControllerBase
    {
        private readonly BackendContext _database;

        /// <summary>
        /// Creates a new instance of the ErrorApiController
        /// </summary>
        /// <param name="database">A pre-existing connection to the database.</param>
        public ErrorApiController(BackendContext database) => _database = database;

        /// <summary>
        /// Action that will be invoked for any call to this Controller in order to handle the current error
        /// </summary>
        /// <response code="500">Returns a 500 internal error</response>
        /// <returns>A generic error formatted as JSON because we are in a REST API app context</returns>
        [ValidateModelState, SwaggerOperation("ApiError")]
        [HttpGet, HttpPost, HttpHead, HttpDelete, HttpPut, HttpOptions, HttpPatch]
        public IActionResult Handle()
        {
            Exception exception = HttpContext.Features.Get<IExceptionHandlerFeature>()?.Error;
            if (exception is not null)
            {
                Log log = new();
                log.Endpoint = HttpContext.Request.Path;
                if (Guid.TryParse(HttpContext.Request.Headers["Authorization"], out Guid userToken))
                {
                    log.Token = userToken;
                }

                if (HttpContext.Request.Headers.TryGetValue("User-Agent", out StringValues userAgent))
                {
                    log.UserAgent = userAgent;
                }
                log.Exception = exception;
                _database.Logs.Add(log);
                _database.SaveChanges();
            }

            Request.HttpContext.Response.Headers["X-Error"] = "true";
            return StatusCode(500, "An internal server error occured. Please try again later, or try with different options.");
        }
    }
}